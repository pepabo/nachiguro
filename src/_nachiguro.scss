/*doc
---
title: Nachiguro
name: 00-about-nachiguro
category: index
---

NachiguroとはSUZURIのCSSフレームワークです。
名前は硯の原料である那智黒石(なちぐろいし)が由来です。

*/

/*doc
---
title: 編集するには？
name: 01-about-edit
category: index
---

このスタイルガイドは、誰でも自由に編集することができます。

すべてのドキュメントは`assets/stylesheets/lib/nachiguro`にあるSCSSファイルのコメントにMarkdownで書かれています。

HTMLファイルは[Hologram](https://github.com/trulia/hologram)を利用して作られていますので、コメントの記法はHologramの仕様に準じます。
詳しくは Hologramの[README](https://github.com/trulia/hologram/blob/master/README.md)をご覧ください。

ドキュメントを追加したり編集したら、`$ docker-compose exec app hologram`を実行すると、このスタイルガイドに反映されます。

*/

/*doc
---
title: コーディングルール
name: 01-about-Rule
category: index
---

#### Nachiguroのコンポーネントであることを明示的にするため接頭辞`ncgr-`をつける

Nachiguroのコンポーネントであることを明示的にするため接頭辞`ncgr-`をつけます。
このルールは最近決めたので、まだ接頭辞がついていないコンポーネントがあります。
随時ついているものに置き換えていきます。

```scss
.ncgr-button {}
```

#### 記法はmindBEMdingに則る

記法は[mindBEMding](https://csswizardry.com/2013/01/mindbemding-getting-your-head-round-bem-syntax/)に則ります。
以下のようにblockとelementはアンダースコア2つ、blockとmodifierはハイフン2つでつなぎます。
この記法にすることは最近決めたので、まだmindBEMdingで書かれていないものがあります。
随時この記法のものに変えていきます。

```scss
.ncgr-block__element {}
.ncgr-block--modifier {}
```

#### JSでDOMを操作する場合は接頭辞`js-`をつける

JSでDOMを操作する場合は接頭辞`js-`をつけます。
このセレクタはあくまでJSから操作する場合のみに使用し、
スタイルシートでスタイルを指定する場合は`js-`接頭辞のないものに指定し、役割を分離します。

```html
<div class="ncgr-block js-ncgr-block">ブロック</div>
```

```css
.ncgr-block {
  color: red;
}
```

```javascript
$('.js-ncgr-block').on('click', function() {
  console.log('クリック！');
});
```

#### margin,paddingの引数

margin, paddingの引数は省略せずに4つすべて書きます。
これはプリプロセッサ経由であればコンパイル時にミニファイ対象であることと、
ぱっと見てわかりやすいためです。
(この「わかりやすい」は人によって違いますが、SUZURIではすべて書くことにします)

```scss
.ncgr-block {
  padding: 10px 0 10px 0;
}
```

ただし、すべて0の場合は引数は1つのほうがわかりやすいので引数は1つにします。

```scss
.ncgr-block {
  padding: 0;
}
```

#### hamlのdivは明示的に書く

hamlのdivは省略可能ですがSUZURIでは明示的にdivであることをわかりやすくするため、
書くようにします。

```haml
%div.ncgr-block
  ブロック
```

#### Sassのrandom関数を使用しない

Sassのrandom関数を使うとdeployした際にCSSが適用されなくなるため、
random関数は使用しないでください。

#### 省略語をなるべく使わない

`btn`や`col`など省略語は使いません。
これは、`btn`と`button`を比べると誰が見ても`button`の方が「ボタンなんだな」とわかるからです。
コードはタイピングの文字数が少なくなることと天秤にかけてもわかることの方が大切です。

#### コンポーネントの命名に和名をなるべく使わない

ズッキュンの名前を`zukkyun`としたくなることがありますが、これは`favorites`とします。
この命名は基本的にはModelの名前と統一してコード内での表記ゆれを減らして考えることを少なくします。
また、違う言語を扱う人が同時にコードを書くときに、英語であればもっとも伝わるコストが少なくてすみます。

*/

$ncgr-sprockets: null !default;
$ncgr-assets-prefix: null !default;

@use 'sass-helpers' with (
  $ncgr-sprockets: $ncgr-sprockets,
  $ncgr-assets-prefix: $ncgr-assets-prefix
);

//「Foundation」は、スタイルシートを読み込む順番が変わると、意図しない表示になる可能性があります。
@use 'foundation/animation';
@use 'foundation/color';
@use 'foundation/normalize';
@use 'foundation/reset';
@use 'foundation/typography';

//「Component」には、抽象化したさまざまなところで利用できる要素・パーツごとのスタイルシートを指定する。
@use 'components/alert';
@use 'components/app-bar';
@use 'components/avatar';
@use 'components/bottom-navigation';
@use 'components/breadcrumbs';
@use 'components/button';
@use 'components/card';
@use 'components/checkbox';
@use 'components/color-selector';
@use 'components/container';
@use 'components/credit-card-icon';
@use 'components/dialog';
@use 'components/full-modal';
@use 'components/grid';
@use 'components/heading';
@use 'components/hint';
@use 'components/icon';
@use 'components/interactive-list';
@use 'components/interactive-table';
@use 'components/image';
@use 'components/label';
@use 'components/list';
@use 'components/list-view';
@use 'components/overlay';
@use 'components/pagenation';
@use 'components/price-slider';
@use 'components/radio';
@use 'components/section';
@use 'components/selectbox';
@use 'components/semi-modal';
@use 'components/separator';
@use 'components/sequence';
@use 'components/side-navigation';
@use 'components/skeleton';
@use 'components/square-radio';
@use 'components/switch';
@use 'components/tab';
@use 'components/table';
@use 'components/textfield';
@use 'components/text-field';
@use 'components/text-link';
@use 'components/tooltip';
@use 'components/uploader';

//「Layout」には、ページ・セクション・レイアウトごとのスタイルシートを指定する。
@use 'layout/footer';
@use 'layout/form';

//「Utility」には、抽象化したさまざまなところで利用できる要素・パーツごとのスタイルシートを指定する。
@use 'utility/align';
@use 'utility/border';
@use 'utility/cursor';
@use 'utility/device';
@use 'utility/is-hidden';
@use 'utility/is-sr-only';
@use 'utility/is-transparent';
@use 'utility/is-visible';
@use 'utility/mar';
@use 'utility/pad';
@use 'utility/typography' as *;
@use 'utility/width';
@use 'utility/ellipsis';
